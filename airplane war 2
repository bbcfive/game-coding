
#include "stdafx.h"
#include "stdlib.h"
#include "stdio.h"
#include "conio.h"
#include "windows.h"

//全局变量
int position_x, position_y;//飞机位置
int bullet_x, bullet_y;//子弹位置
int enemy_x, enemy_y;//敌机位置
int high, width;//游戏画面尺寸
int score;//得分
int life = 3;//生命



void gotoxy(int x, int y)//类似于清屏函数，光标移动到原点位置进行重画
{
	HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD pos;
	pos.X = x;
	pos.Y = y;
	SetConsoleCursorPosition(handle, pos);
}

void HideCursor()
{
	CONSOLE_CURSOR_INFO cursor_info = { 1, 0 };
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &cursor_info);
}

void startup()//数据初始化
{
	high = 20;
	width = 30;
	position_x = high / 2;
	position_y = width / 2;
	bullet_x = -2;
	bullet_y = position_y;
	enemy_x = 0;
	enemy_y = position_y;
	score = 0;
}

void show()//显示画面
{
	HideCursor();
	gotoxy(0, 0);//光标移动到原点位置进行重画清屏
	int i, j;
	for (i = 0; i < high; i++)
	{
		for (j = 0; j < width; j++)
		{
			if ((i == position_x) && (j == position_y))
				printf("*");//输出飞机
			else if ((i == enemy_x) && (j == enemy_y))
				printf("+");//输出敌机
			else if ((i == bullet_x) && (j == bullet_y))
				printf("|");//输出子弹
			else
				printf(" ");//输出空格
		}
		printf("\n");
	}
	printf("得分:%d\n", score);
	printf("生命:%d\n", life);
}

void updateWithoutInput()//与用户输入无关的更新
{
	if (bullet_x > -1)
		bullet_x--;

	if ((bullet_x == enemy_x) && (bullet_y == enemy_y))//子弹击中敌机
	{
		score++;
		enemy_x = -1;//产生新的飞机
		enemy_y = rand() % width;
		bullet_x = -2;//子弹无效
	}
	if (enemy_x > high)//敌机跑出显示屏幕
	{
		life--;
		enemy_x = -1;//产生新的敌机
		enemy_y = rand() % width;
	}

	if ((position_x == enemy_x) && (position_y == enemy_y))//撞机后生命值减少一次
	{
		life--;
		enemy_x = -1;//产生新的敌机
		enemy_y = rand() % width;
	}

	if (life <= 0)//生命值用完，游戏结束
	{
		position_x = -1;
		position_y = -1;
		enemy_x = -2;
		enemy_y = -2;
		printf("game over\n");
	}

	//用来控制敌机向下移动的速度。每隔几次循环，才移动一次敌机
	//这样修改的话，用户按键交互速度还是保持很快，但我们NPC的移动显示可以降速
	static int speed = 0;
	if (enemy_x >= -1)
	{
		if (speed < 10)
			speed++;
		if (speed == 10)
		{
			enemy_x++;
			speed = 0;
		}
	}
}

void  updateWithInput()//与用户输入有关的更新
{
	char input;
	if (_kbhit())
	{
		input = _getch();//根据用户输入移动，不必按回车键
		if (input == 'a')
			position_y--;
		if (input == 'd')
			position_y++;
		if (input == 'w')
			position_x--;
		if (input == 's')
			position_x++;
		if (input == ' ')//发射子弹
		{
			bullet_x = position_x - 1;//发射子弹的初始位置在飞机的正上方
			bullet_y = position_y;
		}
	}
}

int main()
{
	
	startup();//数据初始化
	while (1)
	{
		show();//显示画面
		updateWithoutInput();
		updateWithInput();
	}
	return 0;
}

